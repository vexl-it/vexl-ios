default_platform(:ios)

platform :ios do

	# ***************************************************** #
	# ******************** DEFINITIONS ******************** #
	# ***************************************************** #

	debug_identifier = "it.vexl.debug"
	devel_identifier = "it.vexl.devel"
	staging_identifier = "it.vexl.staging"
	appstore_identifier = "it.vexl.appstore"
	xcodeproj_identifier = "vexl.xcodeproj"
	match_repository = "vexl"

	main_scheme = "vexl"
	gsp_path_devel = "vexl/Resources/GoogleServices/Devel/GoogleService-Info.plist"
	gsp_path_staging = "vexl/Resources/GoogleServices/Staging/GoogleService-Info.plist"
	gsp_path_appstore = "vexl/Resources/GoogleServices/AppStore/GoogleService-Info.plist"
	firebase_app_id_devel = "1:183980003892:ios:74409f1d0e271af7e53061"
	firebase_app_id_staging = "1:183980003892:ios:df1ccdc4ab9cc79ae53061"
	firebase_app_id_appstore = "1:183980003892:ios:4a64a7c7a348dfbce53061"
	firebase_tester_group_id = "Cleevio"
	firebase_client_group_id = "SatoshiLabs"
	firebase_cli_path = "/usr/local/bin/firebase"
	slackUrl = "https://hooks.slack.com/services/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"

	# ***************************************************** #
	# ******************** BEFORE ALL ********************* #
	# ***************************************************** #

	ensure_env_vars(
		env_vars: [
			'FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD',
			'FASTLANE_DONT_STORE_PASSWORD', 
			'FASTLANE_USER', 
			'FASTLANE_PASSWORD', 
			'MATCH_KEYCHAIN_PASSWORD',
			'MATCH_PASSWORD'
		]
	) 

	# ***************************************************** #
	# ******************** FUNCTIONS ********************** #
	# ***************************************************** #

	def install_pods
		cocoapods(
			podfile: "Podfile",
			try_repo_update_on_error: true
		)
	end

	# ***************************************************** #
	# ******************** LANE: Lint ********************* #
	# ***************************************************** #

	desc "Swiftlint script for syntax control"
	lane :lint do
		swiftlint(
			reporter: "html",
			output_file: "fastlane/swiftlint.html"
		)
	end

	# ***************************************************** #
	# ******************** LANE: Test ********************* #
	# ***************************************************** #

	desc "Build the app and run tests"
	lane :test do
		install_pods()
		xcode_select("/Applications/Xcode-14.0.0-Release.Candidate.app")
		clear_derived_data
		run_tests(
			workspace: "vexl.xcworkspace",
			devices: ["iPhone 13"],
			scheme: "vexlTests"
		)
	end

	# ***************************************************** #
	# ************** LANE: Certificates setup ************* #
	# ***************************************************** #

	desc "Create certificates and provisioning profiles for every app environment. This should be run once at the beginning of the project"
	lane :create_signing_assets do
		match(
			git_branch: match_repository,
			type: "development",
			app_identifier: debug_identifier
		)

		match(
			git_branch: match_repository,
			type: "development",
			app_identifier: devel_identifier
		)


		match(
			git_branch: match_repository,
			type: "development",
			app_identifier: staging_identifier
		)

		match(
			git_branch: match_repository,
			type: "development",
			app_identifier: appstore_identifier
		)

		match(
			git_branch: match_repository,
			type: "adhoc",
			app_identifier: devel_identifier
		)

		match(
			git_branch: match_repository,
			type: "adhoc",
			app_identifier: staging_identifier
		)

		match(
			git_branch: match_repository,
			type: "appstore",
			app_identifier: staging_identifier
		)

		match(
			git_branch: match_repository,
			type: "appstore",
			app_identifier: appstore_identifier
		)
	end

	# ***************************************************** #
	# *************** LANE: Deploy devel ****************** #
	# ***************************************************** #

	desc "Submit a new build to Firebase"
	lane :deploy_devel do
		install_pods()

		version = get_version_number
		build = increment_build_number(
			build_number: ENV['CI_JOBENV_ID'],
			xcodeproj: xcodeproj_identifier
		)

		xcode_select("/Applications/Xcode-14.0.0-Release.Candidate.app")

		clean_build_artifacts

		commit_version_bump(
			message: "[ci skip] Build version Bump: #{version}(#{build})",
			xcodeproj: xcodeproj_identifier
		)
	
		branch = git_branch
		push_to_git_remote(
			remote: "origin",
			local_branch: "HEAD",
			remote_branch: branch,
			force: false,
			tags: true
		)

		match(
			type: "adhoc",
			git_branch: match_repository,
			app_identifier: devel_identifier,
			readonly: is_ci
		)

		clear_derived_data

		ipa_path = gym(
			scheme: "#{main_scheme} Devel",
			silent: true,
			clean: true,
			export_method: "ad-hoc",
			export_options: {
				manageAppVersionAndBuildNumber: false,
				compileBitcode: false
			}
		)

		changelog = "\#\##{version}(#{build})"
		changelog += "\n"
		changelog += File.read("../Changelog.txt")

		firebase_app_distribution(
			app: firebase_app_id_devel,
			groups: firebase_tester_group_id,
			release_notes: changelog,
			firebase_cli_path: firebase_cli_path,
			ipa_path: ipa_path
		)

		upload_symbols_to_crashlytics(
			gsp_path: gsp_path_devel
		)

		slack(
			username: "Siri",
			payload: {
			   "Build Date" => Time.new.to_s,
			},
			message: "New iOS Firebase devel version released! :tada:",
			slack_url: slackUrl,
			default_payloads: [:test_result],
			attachment_properties: {
				  fields: [{
						title: "Changelog",
						value: changelog,
						short: true	
			   }]
			}
		  )
	end

	# ***************************************************** #
	# *************** LANE: Deploy Staging **************** #
	# ***************************************************** #

	desc "Submit a new build to Firebase"
	lane :deploy_staging do
		install_pods()

		version = get_version_number
		build = get_build_number(
			xcodeproj: xcodeproj_identifier
		)

		xcode_select("/Applications/Xcode-14.0.0-Release.Candidate.app")

		clean_build_artifacts

		match(
			type: "adhoc",
			git_branch: match_repository,
			app_identifier: staging_identifier,
			readonly: is_ci
		)

		clear_derived_data

		ipa_path = gym(
			scheme: "#{main_scheme} Staging",
			silent: true,
			clean: true,
			export_method: "ad-hoc",
			export_options: {
				manageAppVersionAndBuildNumber: false,
				compileBitcode: false
			}
		)

		changelog = "\#\##{version}(#{build})"
		changelog += "\n"
		changelog += File.read("../Changelog.txt")

		firebase_app_distribution(
			app: firebase_app_id_staging,
			groups: firebase_tester_group_id + ", " + firebase_client_group_id,
			release_notes: changelog,
			firebase_cli_path: firebase_cli_path,
			ipa_path: ipa_path
		)

		upload_symbols_to_crashlytics(
			gsp_path: gsp_path_staging
		)

		match(
			type: "appstore",
			git_branch: match_repository,
			app_identifier: staging_identifier,
			readonly: is_ci
		)

		clear_derived_data

		ipa_path = gym(
			scheme: "#{main_scheme} Staging",
			silent: true,
			clean: true,
			export_method: "app-store",
			export_options: {
				manageAppVersionAndBuildNumber: false,
				compileBitcode: false,
				signingStyle: "manual",
				provisioningProfiles:{
					staging_identifier: "match AppStore " + staging_identifier
				}
			}
		)

		deliver(
			username: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
			skip_metadata: true,
			skip_screenshots: true,
			force: true
		)

		slack(
			username: "Siri",
			payload: {
			   "Build Date" => Time.new.to_s,
			},
			message: "New iOS Firebase Staging version released! :tada:",
			slack_url: slackUrl,
			default_payloads: [:test_result],
			attachment_properties: {
				  fields: [{
						title: "Changelog",
						value: changelog,
						short: true	
			   }]
			}
		  )
	end

	# ***************************************************** #
	# *************** LANE: Deploy Appstore *************** #
	# ***************************************************** #

	desc "Submit a new build to Firebase"
	lane :deploy_appstore do
		install_pods()

		version = get_version_number
		build = get_build_number(
			xcodeproj: xcodeproj_identifier
		)

		xcode_select("/Applications/Xcode-14.0.0-Release.Candidate.app")

		clean_build_artifacts


		unless git_tag_exists(tag: "#{version}(#{build})")
			add_git_tag(tag: "#{version}(#{build})")
	
			branch = git_branch

			push_to_git_remote(
			  remote: "origin",
			  local_branch: "HEAD",
			  remote_branch: branch,
			  force: false,
			  tags: true
			)
		end


		match(
			type: "appstore",
			git_branch: match_repository,
			app_identifier: appstore_identifier,
			readonly: is_ci
		)

		clear_derived_data

		ipa_path = gym(
			scheme: "#{main_scheme} AppStore",
			silent: true,
			clean: true,
			export_method: "app-store",
			export_options: {
				manageAppVersionAndBuildNumber: false,
				compileBitcode: false
			}
		)

		changelog = "\#\##{version}(#{build})"
		changelog += "\n"
		changelog += File.read("../Changelog.txt")

		deliver(
			username: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
			skip_metadata: true,
			skip_screenshots: true,
			force: true
		)

		upload_symbols_to_crashlytics(
			gsp_path: gsp_path_appstore
		)

		slack(
			username: "Siri",
			payload: {
			   "Build Date" => Time.new.to_s,
			},
			message: "New iOS Testflight version released! :tada:",
			slack_url: slackUrl,
			default_payloads: [:test_result],
			attachment_properties: {
				  fields: [{
						title: "Changelog",
						value: changelog,
						short: true	
			   }]
			}
		  )
	end

	# ***************************************************** #
	# ************ LANE: Increment Version **************** #
	# In order to use this you need to send one of these variables:
	# VERSION: Please use semantic versioning (e.g 2.0.1)
	# BUMP_TYPE: It accepts one of these cases:
	#   - major
	#   - minor
	#   - patch
	# ***************************************************** #

	desc "Let you increment the version number before submitting to Appstore"
	lane :bump_version do |options|
		UI.message "Options received: #{options}"

		version = options[:version] ||= ""
		bumpType = options[:bump_type] ||= ""
		hasVersion = !(version.empty?)
		hasBumpType = !(bumpType.empty?)

		if hasVersion
			UI.success "Using version with value '#{version}'"
			increment_version_number_in_xcodeproj(
				version_number: version,
				target: "#{main_scheme}"
			)
		elsif hasBumpType
			UI.success "Using bump_type with value '#{bumpType}'"
			increment_version_number_in_xcodeproj(
				bump_type: bumpType,
				target: "#{main_scheme}"
			)
		else
			UI.success "No parameter for incrementing version was found in the pipeline. Continuing..."
			next
		end

		if hasVersion or hasBumpType
			version = get_version_number
			build = get_build_number(
				xcodeproj: ENV['XCODE_PROJECT']
			)

			clean_build_artifacts

			commit_version_bump(
				message: "[ci skip] Build version Bump: #{version}(#{build})",
				xcodeproj: ENV['XCODE_PROJECT']
			)
			add_git_tag(tag: "#{version}(#{build})")

			branch = git_branch
			push_to_git_remote(
				remote: "origin",
				local_branch: "HEAD",
				remote_branch: branch,
				force: false,
				tags: true
			)
		end
	end
end